{"version":3,"sources":["utils/data.js","utils/packing.js","PhaseContext.js","AddressTable.js","DropPhase.js","DropPhases.js","PasswordGenerator.js","App.js","index.js"],"names":["publicByte32","packAddressAndQuantity","address","quantity","num","addressAsNumberString","web3","utils","hexToNumberString","bytesToBytesN","hexToHexBytes","addressToBytes32","addressBN","BN","quantityAsNumberString","toHex","quantityBN","or","shrn","toString","hex","bytesLength","bytes","hexToBytes","length","concat","unshift","bytesToHex","n","Array","isArray","lengthDiff","Error","emptyBytesN","repeat","split","map","i","parseInt","newBytes","PhaseContext","React","createContext","counter","PhaseProvider","children","useState","index","accessList","startDate","Date","phases","setPhases","phasesData","setPhasesData","onAddPhase","useCallback","pahsesArr","onRemovePhase","phase","filter","item","getPhase","find","updatePhase","newPhase","phaseIndex","findIndex","price","priceInWei","Web3","toWei","console","log","addAddressToPhase","push","setAddressesToPhase","addresses","removeAddressFromPhase","itemId","listItem","id","generateMercleTreeForPhase","warning","isPublic","checkAddress","forEach","warn","isAddress","publicAccessList","accessListProof","newAccessList","accessListPhaseDrop","markleTreeData","data","leafs","leafValue","tree","MerkleTree","keccak256","sortPairs","results","root","getRoot","proof","getHexProof","proofPositional","getPositionalHexProof","toMarkleTree","startTimestamp","getTime","rootHash","phaseDrop","phaseDropStr","generateAndSaveJSON","alert","dropPhases","dropPhasesRemixStr","reduce","prev","next","sort","a","b","substring","TextEncoder","encode","JSON","stringify","blob","Blob","type","saveAs","savePhasesJSON","updatePhaseAccessListItem","itemIndex","Provider","value","usePhaseContext","useContext","papaparseOptions","header","dynamicTyping","skipEmptyLines","AddressTable","window","users","row","setRow","addNewRow","hash","uid","removeRow","addAddress","addQuantity","clickHandler","onFileLoaded","fileInfo","originalFile","parsedData","newData","arr","isNaN","shift","parseCSV","Container","className","Alert","variant","Row","Col","toLocaleString","selected","showTimeSelect","timeFormat","onChange","date","inline","FormControl","step","target","Form","Check","parserOptions","Table","striped","bordered","hover","size","classname","e","icon","faMinusCircle","onClick","Button","faPlusCircle","DropPhase","_onRemovePhase","Accordion","Item","eventKey","Header","Body","DropPhases","onSaveClicked","PasswordGenerator","password","setPassword","hashedPassword","setHashedPassword","useEffect","string","bytes32Password","asciiToHex","abiEndcoded","eth","abi","encodeParameters","hashePassword","FormGroup","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wrBAAaA,EAAe,qE,kEC4BrB,SAASC,EAAuBC,EAASC,GAC5C,IAgDqBC,EAhDfC,EAAwBC,IAAKC,MAAMC,kBA0C7C,SAA0BN,GAGtB,OAAOO,EADgBC,EAAcR,GACA,IA7CsBS,CAAiBT,IACtEU,EAAY,IAAIN,IAAKC,MAAMM,GAAGR,GAC9BS,EAAyBR,IAAKC,MAAMC,mBA8CrBJ,EA9CuDD,EAkD5DM,EADAC,EADJJ,IAAKC,MAAMQ,MAAMX,GACM,IACI,MAjDjCY,EAAa,IAAIV,IAAKC,MAAMM,GAAGC,GAErC,MAAO,KADQF,EAAUK,GAAGD,EAAWE,KAAK,MACvBC,SAAS,IAGlC,SAAST,EAAcU,EAAKC,GACxB,IAAMC,EAAQhB,IAAKC,MAAMgB,WAAWH,GACpC,IAAKC,GAAeA,IAAgBC,EAAME,OACtC,OAAOF,EAAMG,OAAO,IAGxB,GAAIJ,EAAcC,EAAME,OACpB,KAAM,oBAEV,KAAMH,GAAeC,EAAME,QACvBF,EAAMI,QAAQ,GAElB,OAAOpB,IAAKC,MAAMoB,WAAWL,GAGjC,SAASb,EAAca,EAAOM,GACrBC,MAAMC,QAAQR,KACfA,EAAQhB,IAAKC,MAAMgB,WAAWD,IAElC,IAAMS,EAAaH,EAAIN,EAAME,OAC7B,GAAIO,EAAa,EACb,MAAM,IAAIC,MAAM,aAEpB,GAAmB,IAAfD,EACA,OAAOT,EAAMG,OAAO,IAGxB,IAAMQ,EAAc,IAAIC,OAAOH,GAAYI,MAAM,IAAIC,KAAI,SAAAC,GAAC,OAAEC,SAASD,MAE/DE,EAAWjB,EAAMG,OAAOQ,GAE9B,OAAO3B,IAAKC,MAAMoB,WAAWY,G,WC7DpBC,EAAeC,IAAMC,cAAc,IAE5CC,EAAU,EAEDC,EAAgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC5B,EAA4BC,mBAAS,CAAC,CAAEC,MAAOJ,EAASK,WAAY,GAAIC,UAAW,IAAIC,QAAvF,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAoCN,mBAAS,IAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KAEMC,EAAaC,uBAAY,WAC3BJ,GAAU,SAAAK,GAAS,4BAAQA,GAAR,CAAmB,CAAEV,QAASJ,EAASK,WAAY,GAAIC,UAAW,IAAIC,aAC1F,CAACE,IAEEM,EAAgBF,uBAAY,SAACG,GAC/BP,GAAU,SAAAD,GAAM,OAAIA,EAAOS,QAAO,SAAAC,GAAI,OAAIA,IAASF,UACpD,CAACP,IAEEU,EAAWN,uBAAY,SAACT,GAC1B,OAAOI,EAAOY,MAAK,SAAAF,GAAI,OAAIA,EAAKd,QAAUA,OAC3C,CAACI,IAEEa,EAAcR,uBAAY,SAACT,EAAOkB,GACpC,IAAMC,EAAaf,EAAOgB,WAAU,SAAAN,GAAI,OAAIA,EAAKd,QAAUA,KACvDkB,EAASG,QACTH,EAASI,WAAaC,IAAK/D,MAAMgE,MAAMN,EAASG,QAEpDjB,EAAOe,GAAP,2BAA0Bf,EAAOe,IAAgBD,GACjDO,QAAQC,IAAI,eAAgBtB,EAAOe,IACnCd,EAAU,YAAID,MACf,CAACA,IAEEuB,EAAoBlB,uBAAY,SAACT,EAAOc,GAC1C,IAAMF,EAAQG,EAASf,GACvBY,EAAMX,WAAaW,EAAMX,YAAc,GACvCW,EAAMX,WAAW2B,KAAKd,GACtBG,EAAYjB,EAAO,CAACC,WAAYW,EAAMX,eACvC,CAACG,EAAQW,EAAUE,IAGhBY,EAAsBpB,uBAAY,SAACT,EAAO8B,GAC5C,IAAMlB,EAAQG,EAASf,GACvBY,EAAMX,WAAa6B,GAAa,GAChCb,EAAYjB,EAAO,CAACC,WAAYW,EAAMX,eACvC,CAACG,EAAQW,EAAUE,IAEhBc,EAAyBtB,uBAAY,SAACT,EAAOgC,GAC/C,IAAMpB,EAAQG,EAASf,GACvBY,EAAMX,WAAaW,EAAMX,YAAc,GACvCW,EAAMX,WAAaW,EAAMX,WAAWY,QAAO,SAAAoB,GAAQ,OAAIA,EAASC,KAAOF,KACvEf,EAAYjB,EAAO,CAACC,WAAYW,EAAMX,eACvC,CAACG,EAAQW,EAAUE,IAEhBkB,EAA6B1B,uBAAY,SAACT,GAC5C,IAAMY,EAAQG,EAASf,GAGvB,IAAKY,EAAMS,MAEP,OADAJ,EAAYjB,EAAO,CAACoC,QAAS,8BACtB,EAGX,IAAKxB,EAAMV,UAEP,OADAe,EAAYjB,EAAO,CAACoC,QAAS,uCACtB,EAGX,IAAKxB,EAAMyB,SAAU,CAEjB,GADUzB,EAAMX,WAAWY,QAAO,SAAAC,GAAI,OAAKA,EAAK3D,UAAY2D,EAAK1D,YACtDqB,OAEP,OADAwC,EAAYjB,EAAO,CAACoC,QAAS,yBACtB,EAGX,IAAIE,EAAe,GASnB,GARA1B,EAAMX,WAAWsC,SAAQ,SAACzB,EAAMxB,GAC5BwB,EAAK0B,MAAO,EACRjB,IAAK/D,MAAMiF,UAAU3B,EAAK3D,WAC1BmF,GAAY,UAAOhD,EAAE,EAAT,KACZwB,EAAK0B,MAAO,MAIjBF,EAAa7D,OAEZ,OADAwC,EAAYjB,EAAO,CAACoC,QAAQ,sBAAD,OAAwBE,EAAxB,uBACpB,EAIf,IAAMI,EAAmB,CAACzF,GACtB0F,EAAkB1F,EAClB2F,EAAgBhC,EAAMX,WACtB4C,EAAsBH,EAC1B,IAAK9B,EAAMyB,SAAU,CACjB,IACMS,ED/FX,SAAsBC,GACzB,IAAMC,EAAQD,EAAK1D,KAAI,SAAC0D,GACpB,IAAO3F,EAAqB2F,EAArB3F,SAAUD,EAAW4F,EAAX5F,QACjB,OAAO,2BACA4F,GADP,IAEIE,UAAW/F,EAAuBC,EAASC,QAG7C8F,EAAO,IAAIC,IAAWH,EAAM3D,KAAI,SAAAyB,GAAI,OAAIA,EAAKmC,aAAYG,IAAW,CAAEC,WAAW,IAEjFC,EAAU,CACZC,KAFS,KAAOL,EAAKM,UAAUpF,SAAS,OAGxC2E,KAAMC,EAAM3D,KAAI,SAAC0D,EAAM/C,GAAP,mBAAC,eACV+C,GADS,IAEZU,MAAOP,EAAKQ,YAAYX,EAAKE,WAC7BU,gBAAiBT,EAAKU,sBAAsBb,EAAKE,UAAWjD,SAKpE,OAFAyB,QAAQC,IAAI,UAAWwB,EAAK9E,YAC5BqD,QAAQC,IAAI,UAAW4B,GAChBA,EC2EwBO,CADX,YAAOjD,EAAMX,aAGzB4C,GADAD,EAAgBE,EAAeC,MACK1D,KAAI,SAAAyB,GAAI,MAAK,CAC7C3D,QAAS2D,EAAK3D,QACdC,SAAU0D,EAAK1D,SACfqG,MAAO3C,EAAK2C,UAEhBd,EAAkBG,EAAeS,KAGrC,IAAMO,EAAiBvE,SAASqB,EAAMV,UAAU6D,UAAY,KAc5D,OAbA9C,EAAYjB,EAAO,CACfoC,QAAS,GACTnC,WAAY2C,EACZoB,SAAUrB,EACVmB,iBACAG,UAAW,CACP5B,SAAUzB,EAAMyB,SAChByB,iBACAzC,MAAOT,EAAMU,WACbrB,WAAY4C,GAEhBqB,aAAa,IAAD,OAAMJ,EAAN,aAAyBlD,EAAMU,WAA/B,cAA+CqB,EAA/C,QAETC,IACR,CAACxC,EAAQa,EAAaF,IAEnBoD,EAAsB1D,uBAAY,WAEpC,GADqBL,EAAOY,MAAK,SAAAJ,GAAK,OAAgD,IAA5CuB,EAA2BvB,EAAMZ,UAEvEoE,MAAM,6DADV,CAKA,IAAIC,EAAa,GACbC,EAAqBlE,EAAOmE,QAAO,SAACC,EAAMC,GAG1C,OAFAD,GAAQC,EAAKP,aAAe,IAC5BG,EAAWzC,KAAK6C,EAAKR,WACdO,IACR,KAEHH,EAAaA,EAAWK,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEb,eAAiBc,EAAEd,kBAC5DQ,EAAqBA,EAAmBO,UAAU,EAAGP,EAAmB7F,OAAS,GAAK,IAEtF8B,EAAc,CACV+D,qBACAD,eAGJ,IAAM9F,GAAQ,IAAIuG,aAAcC,OAAOC,KAAKC,UAAUZ,IAClDa,EAAO,IAAIC,KAAK,CAAC5G,GAAQ,CAAC6G,KAAM,mCACpCC,iBAAOH,EAAM,uBAEd,CAAC9E,EAAQW,EAAUoB,IAEhBmD,EAAiB7E,uBAAY,SAACT,GAChC,IAAMY,EAAQG,EAASf,GACvB,GAAKY,EAAMX,YAAeW,EAAMX,WAAWxB,OAA3C,CAGA,IAAMF,GAAQ,IAAIuG,aAAcC,OAAOC,KAAKC,UAAUrE,EAAMX,aACxDiF,EAAO,IAAIC,KAAK,CAAC5G,GAAQ,CAAC6G,KAAM,mCACpCC,iBAAOH,EAAM,uBACd,CAAC9E,EAAQW,IAENwE,EAA4B9E,uBAAY,SAACU,EAAYa,EAAQlB,GAC/D,IAAMF,EAAQG,EAASI,GACvBP,EAAMX,WAAaW,EAAMX,WAAWvB,SACpC,IAAM8G,EAAY5E,EAAMX,WAAWmB,WAAU,SAAAa,GAAQ,OAAIA,EAASC,IAAMF,KACxEpB,EAAMX,WAAWuF,GAAjB,2BAAmC5E,EAAMX,WAAWuF,IAAe1E,GACnE,IAAM8B,EAAgBhC,EAAMX,WAAWZ,KAAI,SAACyB,GAAD,mBAAC,eACrCA,GADoC,IAC9BmC,UAAW,GAAIT,MAAM,EAAOiB,OAAO,OAEhDxC,EAAYE,EAAY,CAAClB,WAAY2C,EAAeoB,SAAU,OAC/D,CAAC5D,EAAQW,IAGZ,OACE,cAACtB,EAAagG,SAAd,CACEC,MAAO,CACLtF,SACAI,aACA8E,iBACAC,4BACA5E,gBACAgB,oBACAQ,6BACAN,sBACAZ,cACAX,aACA6D,sBACApC,0BAbJ,SAgBGjC,KAKM6F,EAAkB,kBAAMjG,IAAMkG,WAAWnG,IC5LlDoG,EAAmB,CACrBC,QAAQ,EACRC,eAAe,EACfC,gBAAgB,GAGPC,EAAe,SAAC,GAAa,IAAZrF,EAAW,EAAXA,MAC1BsF,OAAO3I,KAAOgE,IAEd,MAOMoE,IANFhE,EADJ,EACIA,kBACAI,EAFJ,EAEIA,uBACAF,EAHJ,EAGIA,oBACA0D,EAJJ,EAIIA,0BACApD,EALJ,EAKIA,2BACAlB,EANJ,EAMIA,YAGJ,EAAsBlB,mBAASa,EAAMuF,OAAS,IAA9C,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAwCtG,mBAAS,IAAjD,mBACA,GADA,UACkCA,mBAAS,IAAII,OAA/C,mBACA,GADA,UAC0BJ,mBAAS,IAAII,OAAvC,mBAEMmG,GAFN,UAEkB7F,uBAAY,WAC1BkB,EAAkBf,EAAMZ,MAAO,CAAC7C,QAAQ,GAAIC,SAAS,GAAImJ,KAAK,GAAIrE,GAAIsE,kBACvE,CAAC5F,EAAOe,KAEL8E,EAAYhG,uBAAY,SAACyB,GAC3BH,EAAuBnB,EAAMZ,MAAOkC,KACtC,CAACtB,EAAOA,EAAMX,WAAY8B,IAEtB2E,EAAajG,uBAAY,SAACyB,EAAIwD,GAChCH,EAA0B3E,EAAMZ,MAAOkC,EAAI,CAAC/E,QAASuI,MACvD,CAAC9E,EAAOA,EAAMX,WAAYsF,IAEtBoB,EAAclG,uBAAY,SAACyB,EAAIwD,GACjCH,EAA0B3E,EAAMZ,MAAOkC,EAAI,CAAC9E,SAAUsI,MACxD,CAAC9E,EAAOA,EAAMX,WAAYsF,IAEtBqB,EAAenG,uBAAY,WAC7B0B,EAA2BvB,EAAMZ,SACnC,CAACoG,EAAKjE,IAEF0E,EAAepG,uBAAY,SAACsC,EAAM+D,EAAUC,GAC9C,IAAMC,EHrDP,SAAkBjE,GACrB,IAAMkE,EAAUlE,EAAK1D,KAAI,SAAC6H,EAAKlH,GAAN,MAAiB,CAAE7C,QAAS+J,EAAI,GAAI9J,SAAU8J,EAAI,GAAIhF,GAAIlC,MAInF,OAHImH,MAAM5H,SAAS0H,EAAQ,GAAG7J,YAC1B6J,EAAQG,QAELH,EGgDgBI,CAAStE,GAC5BlB,EAAoBjB,EAAMZ,MAAOgH,KAClC,CAACX,EAAQzF,EAAOiB,IAGnB,OACI,eAACyF,EAAA,EAAD,WACI,qBAAKC,UAAW,OAAhB,WACO3G,EAAMwB,SAAW,cAACoF,EAAA,EAAD,CAAOC,QAAS,UAAWF,UAAW,sBAAtC,SACf3G,EAAMwB,YAGf,eAACsF,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,WACI,yDAA4B/G,EAAMV,UAAU0H,oBAC5C,cAAC,IAAD,CACIC,SAAUjH,EAAMV,UAChB4H,gBAAc,EACdC,WAAW,QACXC,SAAU,SAACC,GAAD,OAAUhH,EAAYL,EAAMZ,MAAO,CAACE,UAAW+H,KACzDC,QAAM,OAGd,eAACP,EAAA,EAAD,WACI,6CACA,cAACQ,EAAA,EAAD,CAAa/C,KAAK,SAASgD,KAAM,GAAK1C,MAAO9E,EAAMS,MAC/C2G,SAAU,gBAAGK,EAAH,EAAGA,OAAH,OAAgBpH,EAAYL,EAAMZ,MAAO,CAACqB,MAAOgH,EAAO3C,WACrE9E,EAAMU,YAAc,oBAAGiG,UAAU,QAAb,kBAA2B3G,EAAMU,iBAE1D,eAACqG,EAAA,EAAD,WACI,0CACA,cAACW,EAAA,EAAKC,MAAN,CACInD,KAAK,SAASM,MAAO9E,EAAMyB,SAC3B2F,SAAU,kBAAM/G,EAAYL,EAAMZ,MAAO,CAACqC,UAAWzB,EAAMyB,qBAGrEzB,EAAMyB,UACR,qCACI,cAAC,IAAD,CAAWwE,aAAcA,EAAc2B,cAAe3C,IACtD,eAAC4C,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,KAAnC,UACI,uBAAOtB,UAAW,uBAAlB,SACA,+BACI,mCACA,yCACA,iDACA,sCACA,2CAGJ,gCAEI3G,EAAMX,WAAWZ,KAAI,SAACyB,EAAMxB,GACxB,IAAIwJ,EAAY,GAIhB,OAHGhI,EAAK0B,OACJsG,EAAY,WAGZ,+BACI,6BAAKxJ,EAAE,IACP,oBAAIiI,UAAWuB,EAAf,SACI,uBACIvB,UAAU,gBACVnC,KAAK,OACLM,MAAO5E,EAAK3D,QACZ6K,SAAU,SAACe,GAAD,OAAKrC,EAAW5F,EAAKoB,GAAG6G,EAAEV,OAAO3C,YAGnD,6BACI,uBACIN,KAAK,SACLmC,UAAU,iBACV7B,MAAO5E,EAAK1D,SACZ4K,SAAU,SAACe,GAAD,OAAKpC,EAAY7F,EAAKoB,GAAG6G,EAAEV,OAAO3C,YAGpD,oBAAI6B,UAAW,QAAf,SAAyBzG,EAAKmC,WAAa,MAC3C,oBAAIsE,UAAW,QAAf,SAAyBzG,EAAK2C,MAAQuB,KAAKC,UAAUnE,EAAK2C,OAAS,MACnE,oBAAI8D,UAAW,cAAf,SACI,cAAC,IAAD,CAAiByB,KAAMC,IAAeC,QAAS,kBAAMzC,EAAU3F,EAAKoB,KAAMqF,UAAW,oBArBpFzG,EAAKoB,YA8B9B,8BACI,eAACiH,EAAA,EAAD,CAAQ5B,UAAW,cAAe2B,QAAS5C,EAA3C,wBAEI,cAAC,IAAD,CAAiB0C,KAAMI,IAAe7B,UAAW,wBAK7D,gCACI,uCACW3G,EAAMoD,YAEjB,4CACgBpD,EAAMsD,mBAG1B,oBAAIqD,UAAU,QACd,qBAAKA,UAAW,cAAhB,SACI,cAAC4B,EAAA,EAAD,CAAQD,QAAStC,EAAcW,UAAW,eAA1C,4B,kBC1JT,SAAS8B,EAAT,GAA4C,IAAxBzI,EAAuB,EAAvBA,MAAOD,EAAgB,EAAhBA,cAExB2I,EAAiB7I,uBAAY,WAC/BE,GAAiBA,EAAcC,KAChC,CAACA,EAAOA,EAAMZ,MAAOW,IAExB,OACI,eAAC4I,EAAA,EAAUC,KAAX,CAAgBC,SAAU7I,EAAMZ,MAAhC,UACA,eAACuJ,EAAA,EAAUG,OAAX,yBAA8B9I,EAAMZ,MAApC,KAA6CY,EAAMS,OAAN,iBAAyBT,EAAMS,OAA5E,KAAuFT,EAAMqH,MAAN,gBAAuBrH,EAAMqH,MAChH,qBAAKV,UAAU,sBAAf,SACI,eAAC4B,EAAA,EAAD,CAAQ5B,UAAU,cAAcE,QAAQ,SAASyB,QAASI,EAA1D,yBAEI,cAAC,IAAD,CAAiBN,KAAMC,IAAe1B,UAAU,6BAI5D,cAACgC,EAAA,EAAUI,KAAX,UACI,cAAC,EAAD,CAAc/I,MAAOA,SCd1B,SAASgJ,IACZ,MAMMjE,IALFvF,EADJ,EACIA,OACAE,EAFJ,EAEIA,WACAE,EAHJ,EAGIA,WACAG,EAJJ,EAIIA,cACAwD,EALJ,EAKIA,oBAGI0F,EAAgBpJ,uBAAY,WAChC0D,MACC,CAACA,IAEN,OACI,eAACoF,EAAA,EAAD,WAEQnJ,EAAOf,KAAI,SAACuB,GAAD,OAAY,cAACyI,EAAD,CAAWzI,MAAOA,EAAOD,cAAeA,OAEnE,gCACI,eAACwI,EAAA,EAAD,CAAQ5B,UAAW,cAAe2B,QAAS1I,EAA3C,sBAEI,cAAC,IAAD,CAAiBwI,KAAMI,IAAc7B,UAAW,mBAEpD,cAAC4B,EAAA,EAAD,CAAQD,QAASW,EAAetC,UAAW,WAA3C,0BAGA,6CACiBjH,EAAWgE,4B,aChCrC,SAASwF,IAEZ,MAAgC/J,mBAAS,IAAzC,mBAAOgK,EAAP,KAAiBC,EAAjB,KACA,EAA4CjK,mBAAS,IAArD,mBAAOkK,EAAP,KAAuBC,EAAvB,KAMA,OAJAC,qBAAU,WACND,EL2ED,SAAuBE,GAE1B,IAAKA,EACD,MAAO,GAEX,IAAM7M,EAAO,IAAIgE,IACX8I,EAAkB9M,EAAKC,MAAM8M,WAAWF,GACxCG,EAAchN,EAAKiN,IAAIC,IAAIC,iBAAiB,CAAC,SAAU,CAACL,IAC9D,OAAO9M,EAAKC,MAAMQ,MAAMoF,IAAUmH,IKnFZI,CAAcZ,MACjC,CAACA,EAAUG,IAGV,eAACU,EAAA,EAAD,WACI,wDACA,cAACzC,EAAA,EAAD,CAAaH,SAAU,gBAAGK,EAAH,EAAGA,OAAH,OAAgB2B,EAAY3B,EAAO3C,UAC1D,4BAAIuE,OCEDY,MAXf,WACE,OACC,cAACvD,EAAA,EAAD,CAAWC,UAAW,gBAAtB,SACE,eAAC,EAAD,WACG,cAACqC,EAAD,IACA,cAACE,EAAD,UCPRgB,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.b9a5a528.chunk.js","sourcesContent":["export const publicByte32 = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\r\n\r\nexport function parseCSV(data) {\r\n    const newData = data.map((arr, index) => ({ address: arr[0], quantity: arr[1], id: index }));\r\n    if (isNaN(parseInt(newData[0].quantity))) {\r\n        newData.shift();\r\n    }\r\n    return newData;\r\n}\r\n","import keccak256 from \"keccak256\";\r\nimport MerkleTree from \"merkletreejs\";\r\nimport Web3 from \"web3\";\r\nimport web3 from \"web3\";\r\n\r\nexport function toMarkleTree(data) {\r\n    const leafs = data.map((data) => {\r\n        const {quantity, address} = data;\r\n        return {\r\n            ...data,\r\n            leafValue: packAddressAndQuantity(address, quantity)\r\n        };\r\n    });    \r\n    const tree = new MerkleTree(leafs.map(item => item.leafValue), keccak256, { sortPairs: true })\r\n    const root = '0x' + tree.getRoot().toString('hex')\r\n    const results = {\r\n        root,\r\n        data: leafs.map((data, index) => ({\r\n            ...data,\r\n            proof: tree.getHexProof(data.leafValue),\r\n            proofPositional: tree.getPositionalHexProof(data.leafValue, index),\r\n        }))\r\n    }\r\n    console.log(\"results\", tree.toString()) // true\r\n    console.log(\"results\", results) // true\r\n    return results;    \r\n}\r\n\r\nexport function packAddressAndQuantity(address, quantity) {\r\n    const addressAsNumberString = web3.utils.hexToNumberString(addressToBytes32(address));\r\n    const addressBN = new web3.utils.BN(addressAsNumberString);\r\n    const quantityAsNumberString = web3.utils.hexToNumberString(numberToBytes32(quantity));\r\n    const quantityBN = new web3.utils.BN(quantityAsNumberString);\r\n    const result = addressBN.or(quantityBN.shrn(160));\r\n    return '0x' + result.toString(16);\r\n}\r\n\r\nfunction hexToHexBytes(hex, bytesLength) {\r\n    const bytes = web3.utils.hexToBytes(hex);\r\n    if (!bytesLength || bytesLength === bytes.length) {\r\n        return bytes.concat([]);\r\n    }\r\n\r\n    if (bytesLength < bytes.length) {\r\n        throw \"Data will be lost\";\r\n    }\r\n    while(bytesLength != bytes.length) {\r\n        bytes.unshift(0);\r\n    }\r\n    return web3.utils.bytesToHex(bytes);\r\n}\r\n\r\nfunction bytesToBytesN(bytes, n) {\r\n    if (!Array.isArray(bytes)) {\r\n        bytes = web3.utils.hexToBytes(bytes);\r\n    }\r\n    const lengthDiff = n - bytes.length;\r\n    if (lengthDiff < 0) {\r\n        throw new Error(\"Data loss\");\r\n    }\r\n    if (lengthDiff === 0) {\r\n        return bytes.concat([]);\r\n    }\r\n    // lengthDiff bytes 0\r\n    const emptyBytesN = '0'.repeat(lengthDiff).split('').map(i=>parseInt(i));\r\n    // contact 2 bytes \r\n    const newBytes = bytes.concat(emptyBytesN);\r\n    // create n bytes hex address\r\n    return web3.utils.bytesToHex(newBytes);\r\n}\r\n\r\nfunction addressToBytes32(address) {\r\n    // convert address string to bytes(20)\r\n    const addressBytes20 = hexToHexBytes(address);\r\n    return bytesToBytesN(addressBytes20, 32);\r\n}\r\n\r\nfunction numberToBytes32(num) {\r\n    // convert number to hex\r\n    const hex = web3.utils.toHex(num)\r\n    const bytes12 = hexToHexBytes(hex, 12)\r\n    const bytes32 = bytesToBytesN(bytes12, 32);\r\n    return bytes32;\r\n}\r\n\r\nexport function hashePassword(string) {    \r\n    //const abiEndcoded = web3.eth.abi.encodeParameters(string);\r\n    if (!string) {\r\n        return \"\";\r\n    }\r\n    const web3 = new Web3();\r\n    const bytes32Password = web3.utils.asciiToHex(string);    \r\n    const abiEndcoded = web3.eth.abi.encodeParameters(['bytes'], [bytes32Password]);    \r\n    return web3.utils.toHex(keccak256(abiEndcoded));\r\n}","import React, { useCallback, useState } from \"react\";\r\n\r\nimport { saveAs } from 'file-saver';\r\nimport { toMarkleTree } from \"./utils/packing\";\r\nimport Web3 from \"web3\";\r\nimport { publicByte32 } from \"./utils/data\";\r\n\r\nexport const PhaseContext = React.createContext({});\r\n\r\nlet counter = 1;\r\n\r\nexport const PhaseProvider = ({ children }) => {\r\n    const [phases, setPhases] = useState([{ index: counter, accessList: [], startDate: new Date }]);\r\n    const [phasesData, setPhasesData] = useState({});\r\n\r\n    const onAddPhase = useCallback(() => {\r\n        setPhases(pahsesArr => [...pahsesArr, { index: ++counter, accessList: [], startDate: new Date  }])\r\n    }, [setPhases]);\r\n\r\n    const onRemovePhase = useCallback((phase) => {\r\n        setPhases(phases => phases.filter(item => item !== phase))\r\n    }, [setPhases]);\r\n\r\n    const getPhase = useCallback((index) => {\r\n        return phases.find(item => item.index === index);\r\n    }, [phases]);\r\n\r\n    const updatePhase = useCallback((index, newPhase) => {\r\n        const phaseIndex = phases.findIndex(item => item.index === index)\r\n        if (newPhase.price) {\r\n            newPhase.priceInWei = Web3.utils.toWei(newPhase.price)\r\n        }\r\n        phases[phaseIndex] = { ...phases[phaseIndex], ...newPhase };\r\n        console.log(\"Phase update\", phases[phaseIndex]);       \r\n        setPhases([...phases])\r\n    }, [phases]);\r\n\r\n    const addAddressToPhase = useCallback((index, item) => {\r\n        const phase = getPhase(index);\r\n        phase.accessList = phase.accessList || [];\r\n        phase.accessList.push(item);        \r\n        updatePhase(index, {accessList: phase.accessList })\r\n    }, [phases, getPhase, updatePhase]);\r\n\r\n    \r\n    const setAddressesToPhase = useCallback((index, addresses) => {\r\n        const phase = getPhase(index);\r\n        phase.accessList = addresses || [];\r\n        updatePhase(index, {accessList: phase.accessList })\r\n    }, [phases, getPhase, updatePhase]);\r\n\r\n    const removeAddressFromPhase = useCallback((index, itemId) => {\r\n        const phase = getPhase(index);\r\n        phase.accessList = phase.accessList || [];\r\n        phase.accessList = phase.accessList.filter(listItem => listItem.id !== itemId);  \r\n        updatePhase(index, {accessList: phase.accessList })      \r\n    }, [phases, getPhase, updatePhase]);\r\n\r\n    const generateMercleTreeForPhase = useCallback((index) => {\r\n        const phase = getPhase(index);\r\n        let warning;\r\n\r\n        if (!phase.price) {\r\n            updatePhase(index, {warning: \"Please enther the price!\" });\r\n            return false;\r\n        }\r\n\r\n        if (!phase.startDate) {\r\n            updatePhase(index, {warning: \"Please enther correct start date!\" });\r\n            return false;\r\n        }\r\n\r\n        if (!phase.isPublic) {\r\n            warning = phase.accessList.filter(item => !item.address || !item.quantity)\r\n            if(warning.length){\r\n                updatePhase(index, {warning: 'Fill in all fields!' })      \r\n                return false;\r\n            }\r\n    \r\n            let checkAddress = ''\r\n            phase.accessList.forEach((item, i) => {\r\n                item.warn = false;\r\n                if(!Web3.utils.isAddress(item.address)){                \r\n                    checkAddress += `${i+1},`;\r\n                    item.warn = true;\r\n                }\r\n            });\r\n    \r\n            if(checkAddress.length){            \r\n                updatePhase(index, {warning: `The address in row ${checkAddress} is not correct.`});\r\n                return false;\r\n            }\r\n        }\r\n                \r\n        const publicAccessList = [publicByte32];\r\n        let accessListProof = publicByte32;\r\n        let newAccessList = phase.accessList;\r\n        let accessListPhaseDrop = publicAccessList;\r\n        if (!phase.isPublic) {\r\n            const newArr = [...phase.accessList]\r\n            const markleTreeData = toMarkleTree(newArr)        \r\n            newAccessList = markleTreeData.data;\r\n            accessListPhaseDrop = newAccessList.map(item => ({\r\n                address: item.address,\r\n                quantity: item.quantity,\r\n                proof: item.proof,\r\n            }))\r\n            accessListProof = markleTreeData.root;\r\n        }       \r\n\r\n        const startTimestamp = parseInt(phase.startDate.getTime() / 1000);    \r\n        updatePhase(index, {\r\n            warning: \"\",\r\n            accessList: newAccessList,\r\n            rootHash: accessListProof,\r\n            startTimestamp,\r\n            phaseDrop: {\r\n                isPublic: phase.isPublic,\r\n                startTimestamp,\r\n                price: phase.priceInWei,\r\n                accessList: accessListPhaseDrop\r\n            },\r\n            phaseDropStr: `[${startTimestamp}, ${phase.priceInWei}, \"${accessListProof}\"]`\r\n        })     \r\n        return newAccessList;\r\n    }, [phases, updatePhase, getPhase]);    \r\n\r\n    const generateAndSaveJSON = useCallback(() => {\r\n        const invalidPhase = phases.find(phase => generateMercleTreeForPhase(phase.index) === false);\r\n        if (invalidPhase) {\r\n            alert('Invalid phase exist. Please correct it and try again.')\r\n            return;\r\n        }\r\n\r\n        let dropPhases = [];\r\n        let dropPhasesRemixStr = phases.reduce((prev, next) => {\r\n            prev += next.phaseDropStr + ',';\r\n            dropPhases.push(next.phaseDrop);\r\n            return prev;\r\n        }, '[');\r\n\r\n        dropPhases = dropPhases.sort((a, b) => a.startTimestamp - b.startTimestamp)\r\n        dropPhasesRemixStr = dropPhasesRemixStr.substring(0, dropPhasesRemixStr.length - 1) + ']';\r\n        \r\n        setPhasesData({\r\n            dropPhasesRemixStr,\r\n            dropPhases\r\n        });\r\n\r\n        const bytes = new TextEncoder().encode(JSON.stringify(dropPhases));\r\n        var blob = new Blob([bytes], {type: \"application/json;charset=utf-8\"});\r\n        saveAs(blob, \"access-list.json\");\r\n\r\n    }, [phases, getPhase, generateMercleTreeForPhase]);\r\n\r\n    const savePhasesJSON = useCallback((index) => {\r\n        const phase = getPhase(index);\r\n        if (!phase.accessList || !phase.accessList.length) {\r\n            return;\r\n        }\r\n        const bytes = new TextEncoder().encode(JSON.stringify(phase.accessList));\r\n        var blob = new Blob([bytes], {type: \"application/json;charset=utf-8\"});\r\n        saveAs(blob, \"access-list.json\");\r\n    }, [phases, getPhase]);\r\n\r\n    const updatePhaseAccessListItem = useCallback((phaseIndex, itemId, item) => {\r\n        const phase = getPhase(phaseIndex);\r\n        phase.accessList = phase.accessList.concat();\r\n        const itemIndex = phase.accessList.findIndex(listItem => listItem.id == itemId); \r\n        phase.accessList[itemIndex] = { ...phase.accessList[itemIndex], ...item };\r\n        const newAccessList = phase.accessList.map((item) => ({\r\n            ...item, leafValue: \"\", warn: false, proof: false\r\n        }));\r\n        updatePhase(phaseIndex, {accessList: newAccessList, rootHash: \"\" })\r\n    }, [phases, getPhase]);\r\n\r\n\r\n    return (\r\n      <PhaseContext.Provider\r\n        value={{\r\n          phases,\r\n          onAddPhase,\r\n          savePhasesJSON,\r\n          updatePhaseAccessListItem,\r\n          onRemovePhase,\r\n          addAddressToPhase,\r\n          generateMercleTreeForPhase,\r\n          setAddressesToPhase,\r\n          updatePhase,\r\n          phasesData,\r\n          generateAndSaveJSON,\r\n          removeAddressFromPhase\r\n        }}\r\n      >\r\n        {children}\r\n      </PhaseContext.Provider>\r\n    );\r\n  };\r\n  \r\n  export const usePhaseContext = () => React.useContext(PhaseContext);","import { Alert, Button, Col, Container, Form, FormControl, Row, Table } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMinusCircle, faPlusCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { useCallback, useState } from 'react';\r\nimport { uid } from 'uid';\r\nimport Web3 from \"web3\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport CSVReader from 'react-csv-reader';\r\nimport { parseCSV } from './utils/data';\r\nimport { usePhaseContext } from './PhaseContext';\r\n\r\nconst papaparseOptions = {\r\n    header: false,\r\n    dynamicTyping: true,\r\n    skipEmptyLines: true,\r\n  }\r\n\r\nexport const AddressTable = ({phase}) => {\r\n    window.web3 = Web3;\r\n\r\n    const {\r\n        addAddressToPhase,\r\n        removeAddressFromPhase,\r\n        setAddressesToPhase,\r\n        updatePhaseAccessListItem,\r\n        generateMercleTreeForPhase,\r\n        updatePhase,\r\n      } = usePhaseContext();\r\n\r\n    const [row, setRow] = useState(phase.users || [])\r\n    const [checkAddress, setCheckAddress] = useState([])\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [price, setPrice] = useState(new Date());\r\n\r\n    const addNewRow = useCallback(() => {\r\n        addAddressToPhase(phase.index, {address:\"\", quantity:\"\", hash:\"\", id: uid()});\r\n    }, [phase, addAddressToPhase]);\r\n\r\n    const removeRow = useCallback((id) => {\r\n        removeAddressFromPhase(phase.index, id);\r\n    },[phase, phase.accessList, removeAddressFromPhase]);\r\n\r\n    const addAddress = useCallback((id, value) => {\r\n        updatePhaseAccessListItem(phase.index, id, {address: value})\r\n    },[phase, phase.accessList, updatePhaseAccessListItem])\r\n\r\n    const addQuantity = useCallback((id, value) => {\r\n        updatePhaseAccessListItem(phase.index, id, {quantity: value})\r\n    },[phase, phase.accessList, updatePhaseAccessListItem])\r\n\r\n    const clickHandler = useCallback(() => {\r\n        generateMercleTreeForPhase(phase.index,);         \r\n    },[row, generateMercleTreeForPhase])\r\n\r\n    const onFileLoaded = useCallback((data, fileInfo, originalFile) => {\r\n        const parsedData = parseCSV(data);\r\n        setAddressesToPhase(phase.index, parsedData);\r\n    }, [setRow, phase, setAddressesToPhase])\r\n    \r\n    \r\n    return (\r\n        <Container>\r\n            <div className={'pt-5'}>\r\n                {!!phase.warning && <Alert variant={'warning'} className={'text-center pointer'}>\r\n                    {phase.warning}\r\n                </Alert>}\r\n            </div>\r\n            <Row>\r\n                <Col>\r\n                    <p>Drop Phase Start Date / {phase.startDate.toLocaleString()}</p>\r\n                    <DatePicker\r\n                        selected={phase.startDate}\r\n                        showTimeSelect\r\n                        timeFormat=\"HH:mm\"\r\n                        onChange={(date) => updatePhase(phase.index, {startDate: date})}\r\n                        inline\r\n                        />                    \r\n                </Col>\r\n                <Col>\r\n                    <p>Price in eth</p>\r\n                    <FormControl type=\"number\" step={0.1} value={phase.price} \r\n                        onChange={({ target }) => updatePhase(phase.index, {price: target.value})}/>\r\n                    {phase.priceInWei && <p className='small'>Wei: {phase.priceInWei}</p>}\r\n                </Col>\r\n                <Col>\r\n                    <p>Is Public</p>\r\n                    <Form.Check \r\n                        type=\"switch\" value={phase.isPublic}\r\n                        onChange={() => updatePhase(phase.index, {isPublic: !phase.isPublic})}/>\r\n                </Col>\r\n            </Row>\r\n            {!phase.isPublic && \r\n            <>\r\n                <CSVReader onFileLoaded={onFileLoaded} parserOptions={papaparseOptions}/>            \r\n                <Table striped bordered hover size=\"md\">\r\n                    <thead className={'address-table-header'}>\r\n                    <tr>\r\n                        <th>#</th>\r\n                        <th>Address</th>\r\n                        <th>Access Quantity</th>\r\n                        <th>Leaf</th>\r\n                        <th>Hash</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {\r\n                        phase.accessList.map((item, i) => {\r\n                            let classname = ''\r\n                            if(item.warn){\r\n                                classname = 'warning'\r\n                            }\r\n                            return (\r\n                                <tr key={item.id} >\r\n                                    <td>{i+1}</td>\r\n                                    <td className={classname}>\r\n                                        <input\r\n                                            className='address-input'\r\n                                            type='text'\r\n                                            value={item.address}\r\n                                            onChange={(e)=>addAddress(item.id,e.target.value)}\r\n                                        />\r\n                                    </td>\r\n                                    <td>\r\n                                        <input\r\n                                            type='number'\r\n                                            className='quantity-input'\r\n                                            value={item.quantity}\r\n                                            onChange={(e)=>addQuantity(item.id,e.target.value)}\r\n                                        />\r\n                                    </td>\r\n                                    <td className={'break'}>{item.leafValue || '-'}</td>\r\n                                    <td className={'break'}>{item.proof ? JSON.stringify(item.proof) : '-'}</td>\r\n                                    <td className={'text-center'}>\r\n                                        <FontAwesomeIcon icon={faMinusCircle} onClick={() => removeRow(item.id)}  className={'clr pointer'} />\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                    </tbody>\r\n                </Table>           \r\n                <div>\r\n                    <Button className={'text-center'} onClick={addNewRow}>\r\n                        Add Address\r\n                        <FontAwesomeIcon icon={faPlusCircle}  className={'clr pointer'} />\r\n                    </Button>\r\n                </div>\r\n            </>\r\n            }\r\n            <div>\r\n                <p>\r\n                    Hash: {phase.rootHash}\r\n                </p>\r\n                <p>\r\n                    Drop Data: {phase.phaseDropStr}\r\n                </p>\r\n            </div>\r\n            <hr className='clr'/>\r\n            <div className={'text-center'}>\r\n                <Button onClick={clickHandler} className={'generate-btn'}>\r\n                    Generate\r\n                </Button>                \r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useCallback, useState } from \"react\";\r\nimport { AddressTable } from \"./AddressTable\";\r\nimport { faMinusCircle, faPlusCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { Accordion, Button } from \"react-bootstrap\";\r\n\r\nexport function DropPhase({phase, onRemovePhase}) {\r\n\r\n    const _onRemovePhase = useCallback(() => {\r\n        onRemovePhase && onRemovePhase(phase);\r\n    }, [phase, phase.index, onRemovePhase])\r\n\r\n    return (\r\n        <Accordion.Item eventKey={phase.index}>\r\n        <Accordion.Header>Drop Phase {phase.index}: {phase.price && `price: ${phase.price}`}  {phase.date && `date: ${phase.date}`} \r\n            <div className=\"header-button-group\">\r\n                <Button className=\"text-center\" variant=\"danger\" onClick={_onRemovePhase} >\r\n                    Remove Phase\r\n                    <FontAwesomeIcon icon={faMinusCircle} className='mr-4 clr pointer' />\r\n                </Button>\r\n            </div>                            \r\n        </Accordion.Header>                        \r\n        <Accordion.Body>\r\n            <AddressTable phase={phase}/>                \r\n        </Accordion.Body>\r\n    </Accordion.Item>\r\n    );\r\n}","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useCallback, useState } from \"react\";\r\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { Accordion, Button } from \"react-bootstrap\";\r\nimport { DropPhase } from \"./DropPhase\";\r\nimport { usePhaseContext } from \"./PhaseContext\";\r\n\r\nlet counter = 1;\r\n\r\nexport function DropPhases() {\r\n    const {\r\n        phases,\r\n        phasesData,\r\n        onAddPhase,\r\n        onRemovePhase,\r\n        generateAndSaveJSON,\r\n      } = usePhaseContext();\r\n\r\n      const onSaveClicked = useCallback(() => {\r\n        generateAndSaveJSON();\r\n      }, [generateAndSaveJSON]);\r\n\r\n    return (\r\n        <Accordion>\r\n            {\r\n                phases.map((phase) => (<DropPhase phase={phase} onRemovePhase={onRemovePhase} />))\r\n            }\r\n            <div>\r\n                <Button className={'text-center'} onClick={onAddPhase}>\r\n                    Add Phase\r\n                    <FontAwesomeIcon icon={faPlusCircle} className={'clr pointer'} />\r\n                </Button>\r\n                <Button onClick={onSaveClicked} className={'save-btn'}>\r\n                    Save As Json\r\n                </Button>\r\n                <p>\r\n                    Remix data: {phasesData.dropPhasesRemixStr}\r\n                </p>\r\n            </div>\r\n        </Accordion>\r\n    );\r\n}","import { useEffect, useState } from \"react\";\r\nimport { FormControl, FormGroup } from \"react-bootstrap\";\r\nimport { hashePassword } from \"./utils/packing\";\r\n\r\nexport function PasswordGenerator() {\r\n\r\n    const [password, setPassword] = useState(\"\");\r\n    const [hashedPassword, setHashedPassword] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        setHashedPassword(hashePassword(password))\r\n    }, [password, setHashedPassword])\r\n\r\n    return(\r\n        <FormGroup>\r\n            <p>Please input password: </p>\r\n            <FormControl onChange={({ target }) => setPassword(target.value)}/>\r\n            <p>{hashedPassword}</p>\r\n        </FormGroup>                \r\n    );\r\n\r\n}","import {Container} from \"react-bootstrap\";\nimport {AddressTable} from \"./AddressTable\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { DropPhases } from \"./DropPhases\";\nimport { PhaseProvider } from \"./PhaseContext\";\nimport { PasswordGenerator } from \"./PasswordGenerator\";\n\n\nfunction App() {\n  return (\n   <Container className={'big-container'}>\n     <PhaseProvider>\n        <DropPhases/>\n        <PasswordGenerator/>\n     </PhaseProvider>     \n   </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}