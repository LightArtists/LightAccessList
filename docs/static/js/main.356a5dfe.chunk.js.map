{"version":3,"sources":["utils/Packing.js","AddressTable.js","App.js","index.js"],"names":["packAddressAndQuantity","address","quantity","num","addressAsNumberString","web3","utils","hexToNumberString","bytesToBytesN","hexToHexBytes","addressToBytes32","addressBN","BN","quantityAsNumberString","toHex","quantityBN","or","shrn","toString","hex","bytesLength","bytes","hexToBytes","length","concat","unshift","bytesToHex","n","Array","isArray","lengthDiff","Error","emptyBytesN","repeat","split","map","i","parseInt","newBytes","papaparseOptions","header","dynamicTyping","skipEmptyLines","AddressTable","window","Web3","useState","row","setRow","showAlert","setShowAlert","alertMessage","setAlertMessage","mainHash","setMainHash","checkAddress","setCheckAddress","addNewRow","useCallback","prevState","hash","id","uid","removeRow","filter","item","addAddress","value","newArr","forEach","addQuantity","toggleAlert","bool","clickHandler","isAddress","p","setTimeout","markleTreeData","data","leafs","leafValue","tree","MerkleTree","keccak256","sortPairs","results","root","getRoot","index","proof","getHexProof","proofPositional","getPositionalHexProof","console","log","toMarkleTree","onFileLoaded","fileInfo","originalFile","newData","arr","isNaN","shift","onSaveClicked","newRows","TextEncoder","encode","JSON","stringify","blob","Blob","type","saveAs","Container","className","Alert","show","variant","onClick","parserOptions","Table","striped","bordered","hover","size","classname","includes","onChange","e","target","icon","faMinusCircle","faPlusCircle","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.356a5dfe.chunk.js","sourcesContent":["import keccak256 from \"keccak256\";\r\nimport MerkleTree from \"merkletreejs\";\r\nimport web3 from \"web3\";\r\n\r\nexport function toMarkleTree(data) {\r\n    const leafs = data.map((data) => {\r\n        const {quantity, address} = data;\r\n        return {\r\n            ...data,\r\n            leafValue: packAddressAndQuantity(address, quantity)\r\n        };\r\n    });    \r\n    const tree = new MerkleTree(leafs.map(item => item.leafValue), keccak256, { sortPairs: true })\r\n    const root = '0x' + tree.getRoot().toString('hex')\r\n    const results = {\r\n        root,\r\n        data: leafs.map((data, index) => ({\r\n            ...data,\r\n            proof: tree.getHexProof(data.leafValue),\r\n            proofPositional: tree.getPositionalHexProof(data.leafValue, index),\r\n        }))\r\n    }\r\n    console.log(\"results\", tree.toString()) // true\r\n    console.log(\"results\", results) // true\r\n    return results;    \r\n}\r\n\r\nexport function packAddressAndQuantity(address, quantity) {\r\n    const addressAsNumberString = web3.utils.hexToNumberString(addressToBytes32(address));\r\n    const addressBN = new web3.utils.BN(addressAsNumberString);\r\n    const quantityAsNumberString = web3.utils.hexToNumberString(numberToBytes32(quantity));\r\n    const quantityBN = new web3.utils.BN(quantityAsNumberString);\r\n    const result = addressBN.or(quantityBN.shrn(20));\r\n    return '0x' + result.toString(16);\r\n}\r\n\r\nfunction hexToHexBytes(hex, bytesLength) {\r\n    const bytes = web3.utils.hexToBytes(hex);\r\n    if (!bytesLength || bytesLength === bytes.length) {\r\n        return bytes.concat([]);\r\n    }\r\n\r\n    if (bytesLength < bytes.length) {\r\n        throw \"Data will be lost\";\r\n    }\r\n    while(bytesLength != bytes.length) {\r\n        bytes.unshift(0);\r\n    }\r\n    return web3.utils.bytesToHex(bytes);\r\n}\r\n\r\nfunction bytesToBytesN(bytes, n) {\r\n    if (!Array.isArray(bytes)) {\r\n        bytes = web3.utils.hexToBytes(bytes);\r\n    }\r\n    const lengthDiff = n - bytes.length;\r\n    if (lengthDiff < 0) {\r\n        throw new Error(\"Data loss\");\r\n    }\r\n    if (lengthDiff === 0) {\r\n        return bytes.concat([]);\r\n    }\r\n    // lengthDiff bytes 0\r\n    const emptyBytesN = '0'.repeat(lengthDiff).split('').map(i=>parseInt(i));\r\n    // contact 2 bytes \r\n    const newBytes = bytes.concat(emptyBytesN);\r\n    // create n bytes hex address\r\n    return web3.utils.bytesToHex(newBytes);\r\n}\r\n\r\nfunction addressToBytes32(address) {\r\n    // convert address string to bytes(20)\r\n    const addressBytes20 = hexToHexBytes(address);\r\n    return bytesToBytesN(addressBytes20, 32);\r\n}\r\n\r\nfunction numberToBytes32(num) {\r\n    // convert number to hex\r\n    const hex = web3.utils.toHex(num)\r\n    const bytes12 = hexToHexBytes(hex, 12)\r\n    const bytes32 = bytesToBytesN(bytes12, 32);\r\n    return bytes32;\r\n}","import { Alert, Container, Table } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMinusCircle, faPlusCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { useCallback, useState } from 'react';\r\nimport { uid } from 'uid';\r\nimport Web3 from \"web3\";\r\nimport { packAddressAndQuantity, toMarkleTree } from './utils/Packing';\r\nimport CSVReader from 'react-csv-reader';\r\nimport { saveAs } from 'file-saver';\r\n\r\nconst papaparseOptions = {\r\n    header: false,\r\n    dynamicTyping: true,\r\n    skipEmptyLines: true,\r\n  }\r\n\r\nexport const AddressTable = () => {\r\n    window.web3 = Web3;\r\n    const [row, setRow] = useState([\r\n    ])\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const [alertMessage, setAlertMessage] = useState('')\r\n    const [mainHash, setMainHash] = useState('-')\r\n    const [checkAddress, setCheckAddress] = useState([])\r\n\r\n\r\n    const addNewRow = useCallback(() => {\r\n        setRow(prevState => {\r\n            return [...prevState,{address:\"\", quantity:\"\", hash:\"\", id: uid()} ]\r\n        })\r\n    },[]);\r\n    const removeRow = useCallback((id) => {\r\n        const filter = row.filter((item,) => id !== item.id )\r\n        if(!filter.length){\r\n            setMainHash('')\r\n        }\r\n        setRow(filter)\r\n    },[row]);\r\n    const addAddress = useCallback((id, value) => {\r\n        let newArr = [...row]\r\n        newArr.forEach(item => {\r\n            if(item.id === id){\r\n                item.address = value\r\n            }\r\n        })\r\n        setRow(newArr)\r\n    },[row])\r\n    const addQuantity = useCallback((id, value) => {\r\n\r\n        let newArr = [...row]\r\n        newArr.forEach(item => {\r\n            if(item.id === id){\r\n                item.quantity = value\r\n            }\r\n        })\r\n        setRow(newArr)\r\n    },[row])\r\n    const toggleAlert = useCallback((bool) => {\r\n        setShowAlert(bool)\r\n    },[])\r\n\r\n    const clickHandler = useCallback(() => {\r\n        setCheckAddress([])\r\n        const warning = row.filter(item => !item.address || !item.quantity)\r\n        if(warning.length){\r\n            toggleAlert(true)\r\n            setAlertMessage('Fill in all fields!')\r\n            return false;\r\n        }\r\n        let checkAddress = ''\r\n        row.forEach((item,i) => {\r\n            if(!Web3.utils.isAddress(item.address)){\r\n                setCheckAddress(p => [...p, i])\r\n                checkAddress += `${i+1},`\r\n            }\r\n        })\r\n        if(checkAddress.length){\r\n            toggleAlert(true)\r\n            setAlertMessage(`The address in row ${checkAddress} is not correct.`)\r\n            setTimeout(()=>{\r\n                toggleAlert(false)\r\n            }, 3000)\r\n            return false;\r\n        }\r\n        let newArr = [...row]\r\n        const markleTreeData = toMarkleTree(newArr)        \r\n        setMainHash(markleTreeData.root)\r\n        setRow(markleTreeData.data)\r\n        console.log(markleTreeData)\r\n        return markleTreeData.data;\r\n    },[row])\r\n\r\n    const onFileLoaded = useCallback((data, fileInfo, originalFile) => {\r\n        console.log(data, fileInfo, originalFile)\r\n        const newData = data.map((arr) => ({ address: arr[0], quantity: arr[1] }));\r\n        if (isNaN(parseInt(data[0].quantity))) {\r\n            newData.shift();\r\n        }\r\n        setRow(newData)\r\n\r\n    }, [setRow])\r\n\r\n    const onSaveClicked = useCallback(() => {\r\n        const newRows = clickHandler();\r\n        if (newRows === false) {\r\n            return;\r\n        }\r\n        const bytes = new TextEncoder().encode(JSON.stringify(newRows));\r\n        var blob = new Blob([bytes], {type: \"application/json;charset=utf-8\"});\r\n        saveAs(blob, \"access-list.json\");\r\n    }, [clickHandler])\r\n    return (\r\n        <Container>\r\n            <div className={'pt-5'}>\r\n                <Alert show={showAlert} variant={'warning'} className={'text-center pointer'} onClick={() => toggleAlert(false)}>\r\n                    {alertMessage}\r\n                </Alert>\r\n            </div>\r\n            <CSVReader onFileLoaded={onFileLoaded} parserOptions={papaparseOptions}/>            \r\n            <Table striped bordered hover size=\"md\">\r\n                <thead className={'address-table-header'}>\r\n                <tr>\r\n                    <th>#</th>\r\n                    <th>Address</th>\r\n                    <th>Access Quantity</th>\r\n                    <th>Leaf</th>\r\n                    <th>Hash</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {\r\n                    row.map((item, i) => {\r\n                        let classname = ''\r\n                        if(checkAddress.includes(i)){\r\n                            classname = 'warning'\r\n                        }\r\n                        return (\r\n                            <tr key={item.id} >\r\n                                <td>{i+1}</td>\r\n                                <td className={classname}>\r\n                                    <input\r\n                                        className='address-input'\r\n                                        type='text'\r\n                                        value={item.address}\r\n                                        onChange={(e)=>addAddress(item.id,e.target.value)}\r\n                                    />\r\n                                </td>\r\n                                <td>\r\n                                    <input\r\n                                        type='number'\r\n                                        className='quantity-input'\r\n                                        value={item.quantity}\r\n                                        onChange={(e)=>addQuantity(item.id,e.target.value)}\r\n                                    />\r\n                                </td>\r\n                                <td className={'break'}>{item.leafValue || '-'}</td>\r\n                                <td className={'break'}>{item.proof ? JSON.stringify(item.proof) : '-'}</td>\r\n                                <td className={'text-center'}>\r\n                                    <FontAwesomeIcon icon={faMinusCircle} onClick={() => removeRow(item.id)}  className={'clr pointer'} />\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    })\r\n                }\r\n\r\n                </tbody>\r\n            </Table>\r\n            <div>\r\n                <p className={'text-center'}>\r\n                    <FontAwesomeIcon icon={faPlusCircle} onClick={addNewRow} className={'clr pointer'} />\r\n                </p>\r\n            </div>\r\n            <div>\r\n                <p>\r\n                    Hash: {mainHash}\r\n                </p>\r\n            </div>\r\n            <hr className='clr'/>\r\n            <div className={'text-center'}>\r\n                <button onClick={clickHandler} className={'generate-btn'}>\r\n                    Generate\r\n                </button>\r\n\r\n                <button onClick={onSaveClicked} className={'save-btn'}>\r\n                    Save As Json\r\n                </button>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n","import {Container} from \"react-bootstrap\";\nimport {AddressTable} from \"./AddressTable\";\n\n\nfunction App() {\n  return (\n   <Container className={'big-container'}>\n     <AddressTable/>\n   </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}